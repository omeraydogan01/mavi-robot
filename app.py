import os
import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_community.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain

def main():
    st.set_page_config(page_title="PDF Chatbot", page_icon="ğŸ“„")
    st.header("ğŸ¤– PDF'inle Sohbet Et")

    # ğŸ”‘ API key'i Streamlit secrets veya ortam deÄŸiÅŸkeninden al
    api_key = os.getenv("OPENAI_API_KEY") or st.secrets["OPENAI_API_KEY"]

    uploaded_file = st.file_uploader("Bir PDF yÃ¼kleyin", type="pdf")
    if uploaded_file is not None:
        pdf_reader = PdfReader(uploaded_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()

        # âœ… Recursive splitter ile daha iyi parÃ§alama
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
        chunks = text_splitter.split_text(text)

        # âœ… Daha bÃ¼yÃ¼k embedding modeli
        embeddings = OpenAIEmbeddings(
            model="text-embedding-3-large",
            openai_api_key=api_key
        )

        # âœ… FAISS vektÃ¶r veritabanÄ±
        vectorstore = FAISS.from_texts(chunks, embeddings)

        # KullanÄ±cÄ±dan soru al
        user_question = st.text_input("Sorunuzu buraya yazÄ±n:")

        if user_question:
            docs = vectorstore.similarity_search(user_question, k=5)  # ğŸ”¹ daha fazla chunk getir
            llm = ChatOpenAI(
                model="gpt-4o-mini",
                temperature=0,
                api_key=api_key
            )

            # âœ… Daha gÃ¼Ã§lÃ¼ chain (map_reduce veya refine da seÃ§ilebilir)
            chain = load_qa_chain(llm, chain_type="map_reduce")
            answer = chain.run(input_documents=docs, question=user_question)

            st.write("ğŸ’¡ Cevap:")
            st.write(answer)

if __name__ == "__main__":
    main()
